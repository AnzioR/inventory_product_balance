<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ipb.mapper.SalesMapper">
<!--    매장에 따른  매출 조회 상품 이름별 가능 원가,판매가를 통해 이익률 조회 유 판매날과 유통기한을 통해서 진실 여부 파악 가능-->
    <select id="selectsalesbystore" resultType="Sales">
        SELECT s.id, pi.name as product_name, p.price, p.cost, p.exp, st.name as store_name ,s.qnt, s.sales_date, c.name as category_name,c.id as category_id ,s.store_product_id
        FROM sales s
                 INNER JOIN store_product sp on sp.id = s.store_product_id
                 INNER JOIN product p on p.id = sp.product_id
                 INNER JOIN product_info pi on  pi.product_code = p.product_info_id
                 INNER JOIN store st on st.id = sp.store_id
                 INNER JOIN category c on c.id = pi.category_id
        WHERE store_id = #{store_id};
    </select>
<!--     매출을 등록하는 로직 사용자를 만들지는 않을 거지만 매출이 일어나려면 간단히 라도 필요함-->
    <insert id="insert" parameterType="Sales">
        INSERT INTO sales VALUES (NULL, #{qnt}, #{store_product_id}, now())
    </insert>
<!--    <delete id="delete" parameterType="Sales">-->
<!--        DELETE FROM sales WHERE id = #{id}-->
<!--    </delete>-->

<!--    전체 매장 매출 조회 카테고리,이름 상품 이름별 가능 원가,판매가를 통해 이익률 조회-->
    <select id="selectall" resultType="Sales">
        SELECT s.id,p.price, p.cost, c.id as category_id, c.name as category_name, s.qnt, pi.name as product_name, s.store_product_id, s.sales_date
        FROM sales s
                 INNER JOIN store_product sp on sp.id = s.store_product_id
                 INNER JOIN product p on p.id = sp.product_id
                 INNER JOIN product_info pi on  pi.product_code = p.product_info_id
                 INNER JOIN store st on st.id = sp.store_id
                 INNER JOIN category c on c.id = pi.category_id
    </select>
<!--    매출의 전체를 가져오는 것 필요는 없지만 삭제기능을 위해서 필요함-->
    <select id="select" parameterType="Long" resultType="Sales">
        SELECT *
        FROM sales
        WHERE id = #{id}
    </select>
<!--    매출을 삭제하는 로직 위 타입은 Sales 로 되어잇길래 간단히 id 만 가져와 사용하능한 방식도 만듬-->
    <delete id="salesdelete" parameterType="Long">
        DELETE FROM sales WHERE id = #{id}
    </delete>
    <select id="getTotalQntByEventIdAndProdCode" resultType="EventAutoOrders">
        SELECT
        sum(s.qnt) AS qnt,
        sp.store_id
        FROM sales s
        LEFT JOIN store_product sp ON sp.id = s.store_product_id
        LEFT JOIN product p ON p.id = sp.product_id
        LEFT JOIN product_info pi ON p.product_info_id = pi.product_code
        LEFT JOIN event e ON e.id = #{previousEventId}
        WHERE
            s.sales_date &gt;= e.start_date AND s.sales_date &lt;= e.end_date AND
        p.product_info_id = #{productCode}
        GROUP BY sp.store_id, p.product_info_id
    </select>
</mapper>