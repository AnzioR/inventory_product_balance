<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ipb.mapper.StoreProductMapper">

    <!-- store id로  점포별 재고가 0인 상품을 제외하고  조회 (유통기한 기준으로 오름차순)-->
    <select id="selectstoreproduct" parameterType="Long" resultType="StoreProduct">
        SELECT sp.id,
               pi.name as product_name,
               p.price,
               pi.imgname,
               sp.qnt,
               pi.box_qnt,
               sp.is_using,
               p.exp,
               pi.brand,
               c.name  as category_name,
               pi.detail,
               pi.storage,
               pi.product_code
        FROM store_product sp
                 INNER JOIN product p on p.id = sp.product_id
                 INNER JOIN product_info pi on pi.product_code = p.product_info_id
                 INNER JOIN category c ON pi.category_id = c.id
        WHERE sp.store_id = #{store_id} AND sp.qnt > 0 ORDER BY p.exp ASC
    </select>

    <!-- 이 부분은 추후 자동발주 또는 점포보유상품을 불러오는 과정에서 바뀔수 있으니 서로 공유 해줘야합니다!!!
        윤민지, 채란 에게 얘기해줘야함!!!!
        -->
    <!-- 전체 상품을 store_id로 다 조회하지만 재고가 0인 상품은 조회 x (유통기한 기준으로 오름차순) -->
    <select id="selectall" resultType="StoreProduct">
        SELECT sp.*, p.* FROM store_product sp
        INNER JOIN product p on p.id = sp.product_id
        WHERE p.qnt > 0 AND store_id=#{store_id} ORDER BY p.exp ASC
    </select>

    <!-- 요구사항에 없지만 필요하겠지?  점포 재고에서 카테고리로 가져오기  (재고 0인 상품은 조회 x, 유통기한 기준으로 오름차순 ) -->
    <select id="selectcategoryname" parameterType="Hashmap" resultType="StockInfo">
        SELECT sp.id ,pi.name as product_name, p.price,
               pi.imgname,
               sp.qnt,
               pi.box_qnt,
               sp.is_using,
               p.exp,
               pi.brand,
               pi.storage,
               c.name as category_name,
               pi.storage,
               pi.product_code
        FROM store_product sp
                 INNER JOIN product p on p.id = sp.product_id
                 INNER JOIN product_info pi on pi.product_code = p.product_info_id
                 INNER JOIN category c ON pi.category_id = c.id
        WHERE c.name = #{category_name}
          and store_id = #{store_id} AND sp.qnt > 0
        ORDER BY p.exp ASC
    </select>

<!--  (유통기한 날짜 별 조회) store아이디로 카테고리, 날짜를 검색하면 today 기준으로 원하는 그 날짜의 이하 상품이 조회된다-->
    <select id="selectexpAndExpiringSoon" parameterType="Hashmap" resultType="StockInfo">
        SELECT sp.id ,pi.name as product_name, p.price,
        pi.imgname,
        sp.qnt,
        pi.box_qnt,
        sp.is_using,
        p.exp,
        pi.brand,
        pi.storage,
        c.name as category_name,
        pi.product_code,
        pi.storage
        FROM store_product sp
        INNER JOIN product p on p.id = sp.product_id
        INNER JOIN product_info pi on pi.product_code = p.product_info_id
        INNER JOIN category c ON pi.category_id = c.id
        WHERE c.name = #{category_name}
        and p.exp &lt;= DATE_ADD(CURDATE(), INTERVAL #{days} DAY)
        AND store_id = #{store_id} AND sp.qnt > 0
        ORDER BY p.exp ASC
    </select>



<!-- 요구사항에 없지만 필요하겠지? store_id 와 상품으로 검색하면 재고가 0인 상품 제외하고 검색 상품이 조회됨(유통기한 기준으로 오름차순) -->
    <select id="searchstoreproduct" parameterType="Hashmap" resultType="StockInfo">
        SELECT sp.id ,pi.name as product_name, p.price,
        sp.qnt,
        pi.box_qnt,
        pi.imgname,
        sp.is_using,
        p.exp,
        pi.brand,
        pi.product_code,
        pi.storage,
        c.name as category_name
        FROM store_product sp
        INNER JOIN product p on p.id = sp.product_id
        INNER JOIN product_info pi on pi.product_code = p.product_info_id
        INNER JOIN category c ON pi.category_id = c.id
        WHERE pi.name LIKE CONCAT('%', #{txt}, '%')
        and store_id = #{store_id} AND sp.qnt > 0 ORDER BY p.exp ASC
    </select>

    <!--StoreProduct 추가 -->
    <insert id="insert" parameterType="StoreProduct">
        INSERT INTO store_product
        VALUES (NULL, #{qnt}, #{product_id}, #{store_id}, #{is_using}, #{store_price}, #{event_rate})
    </insert>

    <!--    StoreProduct 수량, 사용여부 수정-->
    <update id="update" parameterType="StoreProduct">
        UPDATE store_product
        SET qnt=#{qnt},
        is_using=#{is_using},
        store_price= #{store_price},
        event_rate= #{event_rate},
        is_auto = #{is_auto}
        WHERE id = #{id}
    </update>

    <!--    StoreProduct 삭제 기능대신 재고를 0으로 만들어줌-->
    <delete id="delete" parameterType="StoreProduct">
        UPDATE store_product
        SET qnt=0,
        is_using=0
        WHERE id = #{id}
    </delete>

    <!-- 발주를 했을 때 STORE_PRODUCT 테이블의 상품재고 수량을 변경시킨다 -->
    <update id="updateqnt" parameterType="StoreProduct">
        UPDATE store_product
        SET
            qnt=#{qnt},
            store_price=#{store_price},
            event_rate=#{event_rate}
        WHERE id = #{id}
    </update>

    <!-- 해당상품을 상세 조회 -->
    <select id="select" parameterType="Long" resultType="StoreProduct">
        SELECT *
        FROM store_product sp
        WHERE sp.id = #{id}
    </select>

    <!-- store_id와 product_id를 조회하는 기능
    발주를 했을 때 해당되는 product_id와 store_id를 갖고 is_using=1(사용중)인 store_product를 검색한다.
    이 검색으로 찾은 store_product의 id를 사용하여 qnt를 수정함
    -->
    <select id="getStoreProductFromStoreIdAndProductId" parameterType="StoreProduct" resultType="StoreProduct">
        SELECT *
        FROM store_product
        WHERE store_id = #{store_id}
          AND product_id = #{product_id}
    </select>

    <!-- 발주를 했을 때 STORE_PRODUCT 테이블의 상품재고 수량을 변경시킨다
    위의 getstoreproductfromstoreidandproductid가 실행되면 해당되는 store_product의 id의 qnt를 발주 수량만큼 변화시킴
    -->
    <update id="storeUpdateQnt" parameterType="StoreProduct">
        UPDATE store_product
        SET qnt=#{qnt}
        WHERE id = #{id}
    </update>

    <!-- 상세페이지에서 자동발주를 신청하면 신청한 정보를 자동발주로 보내준다. -->
    <select id="registerAuto" parameterType="StoreProduct">
        SELECT * FROM
    </select>

    <select id="getStoreProdListByProdCodeAndStoreId" parameterType="Long" resultType="StoreProduct">
        SELECT * FROM store_product WHERE product_code = #{productCode} AND store_id = #{storeId}
    </select>
</mapper>